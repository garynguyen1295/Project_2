time_of_day =
lubridate::hour(Trips$sdate) +
lubridate::minute(Trips$sdate) / 60
Trips$Time <- time_of_day
View(time_of_day)
## 3
day_of_week = lubridate::wday(Trips$sdate, label = TRUE)
Trips$day_of_week <- day_of_week
View(Trips)
Trips %>%
mutate(time_of_day, day_of_week) %>%
ggplot(aes(x = time_of_day)) + geom_density() + facet_wrap( ~ day_of_week)
## 4
View(Trips)
Trips %>%
ggplot(aes(x= time_of_day,fill = client)) + geom_density(alpha = 0.5, color= NA)
## 5
Trips %>%
ggplot(aes(x= time_of_day,fill = client)) + geom_density(alpha = 0.5, color= NA, position = position_stack())
## 6
Trips %>%
mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday")) %>%
ggplot(aes(x= time_of_day,fill = client)) + geom_density(alpha = 0.5, color= NA, position = position_stack()) +
##  facet_wrap(~wday) + ylim(0,0.20)
Trips %>%
mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday")) %>%
ggplot(aes(x= time_of_day)) + geom_density(alpha = 0.5, color= NA, aes(fill=client)) + facet_wrap(~wday) + ylim(0,0.20)
Trips %>%
mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday")) %>%
ggplot(aes(x= time_of_day)) + geom_density(alpha = 0.5, color= NA, aes(fill=client)) + facet_wrap(~wday) + ylim(0,0.20)
Trips %>%
mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday")) %>%
ggplot(aes(x= time_of_day)) + geom_density(alpha = 0.5, color= NA, aes(fill=client)) + facet_wrap(~wday)
Trips %>%
mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday")) %>%
mutate(time_of_day = lubridate::hour(sdate)) %>%
ggplot(aes(x = time_of_day)) +
facet_wrap(~wday) +
geom_density(alpha=0.5, aes(fill=client), color=NA)
Trips %>%
mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), "weekend", "weekday")) %>%
mutate(time_of_day = lubridate::hour(sdate)) %>%
ggplot(aes(x = time_of_day)) +
facet_wrap(~wday) +
geom_density(alpha=0.5, aes(fill=client), color=NA, position = position_stack())
Stations <- Stations %>%
dplyr::rename(sstation=name)
Stations$estation <- Stations$sstation
Stations$lat2 <- Stations$lat
Stations$long2 <- Stations$long
Left <- Stations %>%
select(sstation, lat, long)
Right <- Stations %>%
select(estation, lat2, long2)
Left <- Left %>% merge(Right,all=TRUE)
source("http://tiny.cc/dcf/haversine.R")
Left <- Left %>%
mutate(dist = haversine(lat, long, lat2, long2))
Distances <- Left %>%
select(sstation, estation, dist)
Trips <- Trips %>%
inner_join(Distances)
Trips
head(Left)
Stations <- Stations %>%
dplyr::rename(sstation=name)
Stations$estation <- Stations$sstation
Stations$lat2 <- Stations$lat
Stations$long2 <- Stations$long
Left <- Stations %>%
select(sstation, lat, long)
Right <- Stations %>%
select(estation, lat2, long2)
Left
Right
Stations <- Stations %>%
dplyr::rename(sstation=name)
Stations$estation <- Stations$sstation
Stations$lat2 <- Stations$lat
Stations$long2 <- Stations$long
Left <- Stations %>%
select(sstation, lat, long)
Right <- Stations %>%
select(estation, lat2, long2)
head(Left)
head(Right)
Left <- Left %>% merge(Right,all=TRUE)
source("http://tiny.cc/dcf/haversine.R")
Left <- Left %>%
mutate(dist = haversine(lat, long, lat2, long2))
Distances <- Left %>%
select(sstation, estation, dist)
Trips <- Trips %>%
inner_join(Distances)
Left <- Left %>% merge(Right,all=TRUE)
Left <- Left %>% merge(Right,all=TRUE)
head(Left)
source("http://tiny.cc/dcf/haversine.R")
Left <- Left %>%
mutate(dist = haversine(lat, long, lat2, long2))
Distances <- Left %>%
select(sstation, estation, dist)
Trips <- Trips %>%
inner_join(Distances)
Trips
Trips <- Trips %>%
inner_join(Distances)
head(Trips)
Trips <- Trips %>%
inner_join(Distances)
head(Trips)
Trips<- Trips %>%
mutate(weekday = lubridate::wday(sdate))
Trips$WdayTF <- ifelse(Trips$weekday > 1 & Trips$weekday < 7, "Weekday", "Weekend")
Trips %>%
mutate(hour = lubridate::hour(sdate)) %>%
ggplot(aes(x = dist)) +
facet_grid(client~WdayTF) +
geom_density()
Trips %>%
mutate(hour = lubridate::hour(sdate)) %>%
ggplot(aes(x = hour, y= dist)) +
geom_boxplot(aes(group=hour),
position=position_dodge(), fill="gray", outlier.size = 1) +
facet_grid(client~WdayTF) +
stat_smooth()+
ylim(0,5)
library(DataComputing)
library(ggplot2)
BabyNames %>%
group_by(name, year) %>%
summarise(babies = sum(count)) %>%
filter(babies >= 20) %>%
head(2)
MigrationFlows %>%
left_join(InfantMortality, by = c("destcode"="iso_a3"))
library(DataComputing)
MigrationFlows %>%
left_join(InfantMortality, by = c("destcode"="iso_a3"))
select(country,infant), by=c("name"="country"))
library(DataComputing)
InfantMortality <- CountryCentroids %>%
select(name, iso_a3) %>%
left_join(CountryData %>%
select(country,infant), by=c("name"="country"))
MigrationFlows %>%
left_join(InfantMortality, by = c("destcode"="iso_a3"))
InfantMortality <- CountryCentroids %>%
select(name, iso_a3) %>%
left_join(CountryData %>%
select(country,infant), by=c("name"="country"))
head(InfantMortality)
head(MigrationFlows)
MigrationFlows %>%
left_join(InfantMortality, by = c("destcode"="iso_a3")) %>%
head
nrow(MigrationFlows)
MigrationFlows %>%
left_join(InfantMortality, by = c("destcode"="iso_a3")) %>%
nrow
filter(InfantMortality, iso_a3 == "FRA")
Types %>%
mutate(fprop = f /n_women , mprop = m / n_men, ratio = fprop / mprop) %>%
arrange(desc(pmax(fprop / mprop, mprop / fprop)))
n_women <- 24117
n_men <- 35829
BodyTypes %>%
mutate(fprop = f /n_women , mprop = m / n_men, ratio = fprop / mprop) %>%
arrange(desc(pmax(fprop / mprop, mprop / fprop)))
testLoop <- function(n)
{
xVec <- rep(NA, n-1)
xVec[1] <- 1
xVec[2] <- 2
for( j in 3:(n-1) )
xVec[j] <- xVec[j-1] + 2/xVec[j-1]
return(xVec)
}
testLoop(3)
testLoop(1)
testLoop
fib <- function(n) {
if (n == 1) {
return(1)
} else if ( n == 2) {
return(1)
} else {
return(fib(n-1) + fib(n-2))
}
}
fib(5)
filter(InfantMortality, iso_a3 == "FRA")
?lapply
?apply
library(DataComputing)
library(rvest)
library(lubridate)
page <- "http://en.wikipedia.org/wiki/List_of_nuclear_reactors"
xpath <- '//*[@id="mw-content-text"]/table'
table_list <- page %>%
read_html() %>%
html_nodes(xpath = xpath) %>%
html_table(fill = TRUE)
View(table_list)
library(DataComputing)
library(rvest)
library(lubridate)
page <- "http://en.wikipedia.org/wiki/List_of_nuclear_reactors"
xpath <- '//*[@id="mw-content-text"]/table'
table_list <- page %>%
read_html() %>%
html_nodes(xpath = xpath) %>%
html_table(fill = TRUE)
length(table_list)
library(DataComputing)
library(rvest)
library(lubridate)
install.packages("rvest"
library(DataComputing)
library(rvest)
library(lubridate)
install.packages("rvest")
page <- "http://en.wikipedia.org/wiki/List_of_nuclear_reactors"
xpath <- '//*[@id="mw-content-text"]/table'
table_list <- page %>%
read_html() %>%
html_nodes(xpath = xpath) %>%
html_table(fill = TRUE)
View(table_list)
length(table_list)
library(DataComputing)
library(rvest)
library(lubridate)
install.packages("rvest")
page <- "http://en.wikipedia.org/wiki/List_of_nuclear_reactors"
xpath <- '//*[@id="mw-content-text"]/table'
table_list <- page %>%
read_html() %>%
html_nodes(xpath = xpath) %>%
html_table(fill = TRUE)
library(XML)
# Read the data into R
er = xmlTreeParse("http://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist-90d.xml")
er
erRoot = xmlRoot(er)
xmlSize(erRoot)
erRoot
names(erRoot)
erRoot[['Cube']][1]
View(erRoot)
erRoot
gbp_nodes = getNodeSet(erRoot, '//x:Cube[FILL IN]', namespaces = "x")
gbp_nodes = getNodeSet(erRoot, '//x:Cube[currency = "GBP"]', namespaces = "x")
gbp_nodes
View(gbp_nodes)
gbp_nodes = getNodeSet(erRoot, '//x:Cube[currency = "GBP"]', namespaces = "x")
gbp_nodes
getNodeSet(erRoot, '//x:Cube[currency = "GBP"]', namespaces = "x")
erRoot
getNodeSet(erRoot, '//x:Cube[Cube[Cube[currency = "GBP"]]]', namespaces = "x")
gbp1 = sapply(gbp_nodes, xmlGetAttr, "rate")
gbp1
gbp1 = sapply(gbp_nodes, xmlGetAttr, "rate")
gbp1
gbp_nodes = getNodeSet(erRoot, '//x:Cube[@currency = "GBP"]', namespaces = "x")
gbp_nodes
gbp1 = sapply(gbp_nodes, xmlGetAttr, "rate")
gbp1
getNodeSet(erRoot, "//time="2016-04-08"")
getNodeSet(erRoot, "//time= "2016-04-08"")
head(gbp1)
length(gbp1)
class(gbp1)
er = xmlTreeParse("http://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist-90d.xml", useInternalNodes = TRUE)
erRoot = xmlRoot(er)
gbp2 = xpathSApply(erRoot, '//x:Cube[@currency="GBP"]',
xmlGetAttr, "rate", namespaces = "x")
identical(gbp1, gbp2)
days = xpathSApply(erRoot, '//x:Cube[@time]',
xmlGetAttr, "time", namespaces = "x")
days
days = xpathSApply(erRoot, '//x:Cube[@time]', xmlGetAttr, "time", namespaces = "x")
days
head(days)
dayze = as.Date(days)
dayze
length(dayze) == length(gbp1)
# Recall gbp1 is a character vector; let's fix that now
gbp = as.numeric(gbp1)
df <- data.frame(dayze,gbp)
# Let's plot the GBP exchange rate vs time.
df %>% ggplot(aes(x=dayze,y=gbp)) + geom_line() + labs(title="Exchange Rates Over Time",x="Date",y="Exchange Rate (against Euro)")
library(DataComputing)
# Recall gbp1 is a character vector; let's fix that now
gbp = as.numeric(gbp1)
df <- data.frame(dayze,gbp)
# Let's plot the GBP exchange rate vs time.
df %>% ggplot(aes(x=dayze,y=gbp)) + geom_line() + labs(title="Exchange Rates Over Time",x="Date",y="Exchange Rate (against Euro)")
```
# Recall gbp1 is a character vector; let's fix that now
gbp = as.numeric(gbp1)
df <- data.frame(dayze,gbp)
# Let's plot the GBP exchange rate vs time.
df %>% ggplot(aes(x=dayze,y=gbp)) + geom_line() + labs(title="Exchange Rates Over Time",x="Date",y="Exchange Rate (against Euro)")
getExchangeRates = function(abbrev,root, numDays = NULL ){
# get rates
currency_path = sprintf('//x:Cube[@currency="%s"]',
abbrev)
rates = xpathSApply(root, currency_path,
xmlGetAttr, "rate", namespaces = "x")
# format as numeric vector:
rates = as.numeric(rates)
# Check to see if there are any missing rates.
# print a warning
if (!is.null(numDays)) {
if(length(rates) != numDays) {
warning("Incorrect number of dates!")
}
}
return(rates)
}
currencies = mapply(getExchangeRates,
abbrev = c("GBP", "USD", "CAD", "AUD"),
root = erRoot,
numDays = length(dayze),
SIMPLIFY = FALSE)
# Find the range of these exchange rates
rateMin = min(sapply(currencies, min))
rateMax = max(sapply(currencies, max))
rateRange = c(rateMin, rateMax)
df_wide <- data.frame(dayze,GBP=currencies[[1]],USD=currencies[[2]],CAD=currencies[[3]],AUD=currencies[[4]])
df <- df_wide %>% gather(key=countries, value=rate, GBP,USD, CAD, AUD)
df %>% ggplot(aes(x=dayze,y=rate, col=countries)) + geom_line() + labs(title="Exchange Rates Over Time",x="Date",y="Exchange Rate (against Euro)")
BabyNames %>%
group_by(name) %>%
summarise(tot = sum(count))
library(DataComputing)
View(CarRegistrations)
?CarRegistrations
??CarRegistrations
NameList %>%
filter( grepl("shine", name)) %>%
head()
grepl("[a\\.]", c("hello.bye", "adam"))
Credit_data <- read.csv('../../data/Credit.csv', header = TRUE )
library(knitr)
Credit_data <- read.csv('C:/Users/Thuc/Dropbox/UC_Berkley/FALL_2016/STAT_159/PROJECTS/Stat159_Project_2/data', header = TRUE )
getwd()
setwd("C:/Users/Thuc/Dropbox/UC_Berkley/FALL_2016/STAT_159/PROJECTS/Stat159_Project_2/data")
setwd(file.path(getwd()))
credit_data = read.csv("../../data/Credit.csv", header = TRUE)
credit_data = credit_data[,-1]
setwd(file.path(getwd()))
getwd()
credit_data = read.csv("Credit.csv", header = TRUE)
credit_data = credit_data[,-1]
setwd(file.path(getwd()))
getwd()
setwd("C:/Users/Thuc/Dropbox/UC_Berkley/FALL_2016/STAT_159/PROJECTS/Stat159_Project_2/code/scripts")
data/
credit_data = read.csv("../../data/Credit.csv", header = TRUE)
credit_data = read.csv("../../data/Credit.csv", header = TRUE)
credit_data = credit_data[,-1]
getwd()
credit_data = read.csv("../../data/Credit.csv", header = TRUE)
credit_data = credit_data[,-1]
library(faraway)
data(savings)
summary(savings)
plot(sr ~ pop15, data = savings)
plot(sr ~ pop75, data = savings)
plot(sr ~ dpi, data = savings)
plot(sr ~ ddpi, data = savings)
savings[savings$ddpi > 15, ]
library(ggplot2)
setwd(file.path(getwd()))
credit = read.csv("../../data/Credit.csv", header = TRUE)
getwd()
?file.path
credit <- credit[-1]
head(credit)
quants <- c('Income', 'Limit', 'Rating', 'Cards', 'Age', 'Education', 'Balance')
mean_c <- apply(credit[,quants], 2, mean)
colnum(credit)
min_c <- apply(credit[,quants], 2, min)
max_c <- apply(credit[,quants], 2, max)
iqr_c <- apply(credit[,quants], 2, IQR)
sd_c <- apply(credit[,quants], 2, sd)
range_c <- apply(credit[,quants], 2, range)
range_c
max_c
quantile_c <- apply(credit[,quants], 2, quantile, probs = c(0.25,0.75))
quantil_\
quantile_c
for (index in 1:length(quants)) {
quant <- quants[index]
hist(credit[,quant], main = paste('Histogram of', quant), xlab = paste(quant))
boxplot(credit[,quant], main = paste('Boxplot of', quant))
}
qualitatives <- c("Gender","Student", "Married", "Ethnicity")
freq_c <- apply(credit[,qualitatives],2, table)
freq_c
rel_freq_c <- apply(credit[,qualitatives],2,prob.table)
rel_freq_c <- apply(credit[,qualitatives],2, prob.table)
freq_c <- apply(credit[,qualitatives],2, table)
rel_freq_c <- apply(credit[,qualitatives],2, prob.table)
prop.table(credit)
pro.table(freq_c)
prob.table(freq_c)
?prob.table
??prob.table
rel_freq_c <- apply(data.frame(credit[,qualitatives]),2, prob.table)
rel_freq_c <- apply(table(credit[,qualitatives]),2, prob.table)
freq_c
data.frame(freq_c)
?table
freq_c
data.frame(freq_c)
with(freq_c)
?with
table(freq_c)
qualitatives <- c("Gender","Student", "Married")
freq_c <- apply(credit[,qualitatives],2, table)
table(freq_c)
data.frame(freq_c)
freq_c <- apply(credit[,qualitatives],2, table)
freq_c
Gender_table <- table(c("Male", "Female"), Gender)
Gender_table <- table(c("Male", "Female"), "Gender")
Gender_table <- with(credit, Gender)
Gender_table
Gender_table <- with(credit, table(Gender))
Gender_table
freq_c <- apply(credit[,qualitatives],2, with)
Gender_freq <- with(credit, table(Gender))
freq_c <- apply(credit[,qualitatives],2, with)
Gender_freq <- with(credit, table(Gender))
Student_freq  <- with(credit, table(Student))
Married_freq <- with(credit, table(Married))
Ethnicity_freq <- with(credit, table(Ethinicity))
Student_freq
Gender_rel_freq <- prop.table(Gender_freq)
Gender_rel_freq
rel_freq <- c(Gender_freq,Student_freq,Married_freq,Ethnicity_freq)
prop.table(rel_freq)
Ethnicity_freq <- with(credit, table(Ethinicity))
Ethnicity_freq <- with(credit, table(Ethnicity))
rel_freq <- c(Gender_freq,Student_freq,Married_freq,Ethnicity_freq)
prop.table(rel_freq)
Gender_rel_freq <- prop.table(Gender)
Student_rel_freq  <- prop.table(Student)
Married_rel_freq <- prop.table(Married)
Ethnicity_rel_freq <- prop.table(Ethnicity)
Gender_rel_freq <- prop.table(Gender_freq)
Student_rel_freq  <- prop.table(Student_freq)
Married_rel_freq <- prop.table(Married_freq)
Ethnicity_rel_freq <- prop.table(Ethnicity_freq)
barplot(Gender_rel_freq)
barplot(Gender_rel_freq, ylab = proportion)
barplot(Gender_rel_freq, ylab = proportion)
barplot(Gender_rel_freq, ylab = "proportion")
barplot(Student_rel_freq, ylab = proportion)
barplot(Ethnicity_rel_freq, ylab = "proportion")
Ethnicity_rel_freq <- prop.table(Ethnicity_freq)
Ethnicity_rel_freq
barplot(Gender_rel_freq, ylab = "proportion")
barplot(Student_rel_freq, ylab = "proportion")
barplot(Married_rel_freq, ylab = "proportion")
barplot(Ethnicity_rel_freq, ylab = "proportion")
barplot(Married_rel_freq, ylab = "proportion")
barplot(Ethnicity_rel_freq, ylab = "proportion", main = "Relative frequency for Ethnicity")
barplot(Gender_rel_freq, ylab = "proportion", main = "Relative frequency for Gender")
barplot(Student_rel_freq, ylab = "proportion", main = "Relative frequency for Student" )
barplot(Married_rel_freq, ylab = "proportion", main = "Relative frequency for Married")
barplot(Ethnicity_rel_freq, ylab = "proportion", main = "Relative frequency for Ethnicity")
credit
View(credit)
cor(credit, use="complete.obs", method="kendall")
type(credit)
as.type(credit)
typeof(credit)
quants
x <- credit[1:4]
x
credit_quants <- credit[,-6,-7]
credit_quants
credit_quants <- credit[,-6,-7,-8,-9]
y <- credit[5,6,11]
y
y <- credit[5:6]
y
:credit_quants <- credit[,-(7:10)]
credit_quants <- credit[,-(7:10)]
credit_quants
x <- credit_quants[1:4]
y <- credit_quants[5:7]
cor(x,y)
pairs(credit_quants)
pairs(credit_quants, main = "Scatterplot matrix among quantitative variables")
qualitatives
credit_qualitatives <- credit[,7:10]
credit_qualitatives
aov(credit$Balance,credit_qualitatives)
aov(credit[,11],credit_qualitatives)
aov(credit[,11],credit_qualitatives)
?aov()
aov(credit[,11]~credit_qualitatives)
credit_qualitatives
fit <- aov(credit[,11]~credit_qualitatives)
fit <- aov(credit$Balance~credit_qualitatives$Gender+credit_qualitatives$Student
+credit_qualitatives$Married+credit_qualitatives$Ethnicity)
summary(fit)
