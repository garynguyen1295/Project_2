temp_credit
View(credit)
temp_credit[ ,-1]
new_credit <- cbind(temp_credit[ ,-1], Balance = Balance)
new_credit <- cbind(temp_credit[ ,-1], Balance = credit$Balance)
new_credit
scaled_credit <- scale(new_credit, center = TRUE, scale = TRUE)
scaled_credit
write.csv(scaled_credit, file = "path/of/processed/data/scaled-credit.csv")
write.csv(scaled_credit, file = "scaled-credit.csv")
getwd()
setwd("~/Desktop/Stat159_project_2/data")
read.csv('scaled-credit.csv')
credit <- read.csv('scaled-credit.csv')
str(credit)
?sample
train <- sample(credit[1,], 300)
train <- sample(300)
train
sample(400, 100)
sample(400, 300)
nrow(credit)
train <- credit[sample(nrow(credit), 300),]
random_300 <- sample(nrow(credit), 300)
train <- credit[random_300,]
test <- credit[-random_300,]
?sample.seed
?set.seed
set.seed(1)
set.seed(400)
random_300 <- sample(nrow(credit), 300)
train <- credit[random_300,]
test <- credit[-random_300,]
train
str(credit)
credit <- credit[-1]
str(credit)
set.seed(400)
random_300 <- sample(nrow(credit), 300)
train <- credit[random_300,]
test <- credit[-random_300,]
train
random_300 <- sample(nrow(credit), 300)
train <- credit[random_300,]
test <- credit[-random_300,]
train
test
set.seed(400)
random_300 <- sample(nrow(credit), 300)
train <- credit[random_300,]
test <- credit[-random_300,]
train
?lm
lm_ols <- lm(Balance ~ ., data = train)
lm_ols
install.packages(c('glmnet', 'pls'))
install.packages(c('glmnet', 'pls'), dependencies = T)
library(pls)
library(glmnet)
library(glmnet)
?cv.glmnet
set.seed(10)
train[-Balance]
cv.glmnet(train[,-Balance], train[Balance]intercept = FALSE, standardize = FALSE)
train[,-Balance
]
train
credit <- credit[-1]
str(credit)
set.seed(400)
random_300 <- sample(nrow(credit), 300)
train <- credit[random_300,]
test <- credit[-random_300,]
train
lm_ols <- lm(Balance ~ ., data = train)
set.seed(10)
train[,-Balance]
train[,'Balance']
train[,-'Balance']
train[,-['Balance']]
View(credit)
read.csv('http://www-bcf.usc.edu/~gareth/ISL/Credit.csv')
credit <- read.csv('http://www-bcf.usc.edu/~gareth/ISL/Credit.csv')
str(credit)
credit <- credit[-1]
str(credit)
temp_credit <- model.matrix(Balance ~ ., data = credit)
temp_credit
temp_credit['Balance']
new_credit <- cbind(temp_credit[ ,-1], Balance = credit$Balance)
scaled_credit <- scale(new_credit, center = TRUE, scale = TRUE)
getwd()
write.csv(scaled_credit, file = "scaled-credit.csv")
credit <- read.csv('scaled-credit.csv')
credit <- credit[-1]
str(credit)
set.seed(400)
random_300 <- sample(nrow(credit), 300)
train <- credit[random_300,]
test <- credit[-random_300,]
train
lm_ols <- lm(Balance ~ ., data = train)
set.seed(10)
train[Balance]
train[,Balance]
train['Balance']
train[-'Balance']
train[,12]
train[,-12]
grid <- 10Ë†seq(10, -2, length = 100)
^
2^2
grid <- 10^seq(10, -2, length = 100)
cv.glmnet(train[,-12], train[12], intercept = FALSE, standardize = FALSE)
cv.glmnet()
?cv.glmnet
y = train['Balance'
]
y
Balance
cv.glmnet(x = train[,-12], y = train['Balance'], intercept = FALSE, standardize = FALSE)
cv.glmnet(x = train[,-12], y = train['Balance'], intercept = FALSE, standardize = FALSE, lambda = grid)
cv.glmnet(x = train[,-12], y = train[,12], intercept = FALSE, standardize = FALSE, lambda = grid)
train[,-12]
x = train[,-12
y = train[,12]
y = train[,12]
dim(x)
x = train[,-12]
dim(x)
dim(y)
cv.glmnet(x = train[,-12], y = data.frame(train[,12]), intercept = FALSE, standardize = FALSE, lambda = grid)
y = data.frame(train[,1
]
y = data.frame(train[,12])
dim(y)
dim(x)
cv.glmnet(x = train[,-12], y = data.frame(train[,12]), intercept = FALSE, standardize = FALSE, lambda = grid)
grid <- 10^seq(10, -2, length = 100)
cv.glmnet(x = train[,-12], y = data.frame(train[,12]), intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
cv.glmnet(x = as.matrix(train[,-12]), y = data.frame(train[,12]), intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
x = as.matrix(train[,-12])
x
class(x)
mode(x)
cv.glmnet(x = as.matrix(train[,-12]), y = data.frame(train[,12]))
cv.glmnet(x = as.matrix(train[,-12]), y = as.double(train[,12]), intercept = FALSE, standardize = FALSE, alpha = 0, lambda = grid)
ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = as.double(train[,12]), intercept = FALSE, standardize = FALSE, alpha = 0, lambda = grid)
plot(ridge)
save(ridge, 'ridgeregressionmodels.RData')
save(ridge, file = 'ridgeregressionmodels.RData')
lambda_opt <- ridge$lambda.min
plot(ridge)
abline(lambda_opt)
abline(v = lambda_opt)
credit
getwd()
scaled_credit <- read.csv(file = 'scaled-credit.csv')
scaled_credit <- scaled_credit[-1]
scaled_credit
View(scaled_credit)
set.seed(400)
random_300 <- sample(nrow(credit), 300)
train <- credit[random_300,]
test <- credit[-random_300,]
read.csv()
?read.csv
train <- read.csv(file = 'data/train_credit.csv')
getwd()
train <- read.csv(file = 'train_credit.csv')
train <- train[-1]
test <- read.csv(file = 'test_credit.csv')
test <- test[-1]
train
credit
is.na(credit)
sum(is.na(credit))
grid <- 10^seq(10, -2, length = 100)
train <- read.csv(file = 'train_credit.csv')
train <- train[-1]
test <- read.csv(file = 'test_credit.csv')
test <- test[-1]
# setting the grid of lambdas manually
grid <- 10^seq(10, -2, length = 100)
ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = as.double(train[,12]),
intercept = FALSE, standardize = FALSE, alpha = 0, lambda = grid)
ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = train[,12],
intercept = FALSE, standardize = FALSE, alpha = 0, lambda = grid)
ridge
as.double(
as.double(
ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = as.double(train[,12]),
intercept = FALSE, standardize = FALSE, alpha = 0, lambda = grid)
ridge
ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = train[,12],
intercept = FALSE, standardize = FALSE, alpha = 0, lambda = grid)
plot(ridge)
?ridge
?glmnet
?cv.glmnet
ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = train[,12],
intercept = FALSE, standardize = FALSE, alpha = 0, lambda = grid, nfolds = 10)
ridge
set.seed(10)
ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = train[,12],
intercept = FALSE, standardize = FALSE, alpha = 0, lambda = grid, nfolds = 10)
save(ridge, file = 'ridge_models.RData')
png('ridge_cv_errors_plot.png')
plot(ridge)
abline(v = best_lambda)
best_lambda <- ridge$lambda.min
png('ridge_cv_errors_plot.png')
plot(ridge)
abline(v = best_lambda)
dev.off()
plot(ridge)
abline(v = best_lambda)
plot(ridge, main 'timo')
abline(v = best_lambda)
plot(ridge, main = 'timo')
plot(ridge)
abline(v = best_lambda)
png('ridge_cv_errors_plot.png')
plot(ridge)
abline(v = best_lambda)
dev.off()
?cv.glmnet
ridge <- cv.glmnet(x = as.matrix(test[,-12]), y = test[,12],
intercept = FALSE, standardize = FALSE, alpha = 0, lambda = best_lambda)
ridge <- cv.glmnet(x = as.matrix(test[,-12]), y = test[,12],
intercept = FALSE, standardize = FALSE, alpha = 0, lambda = seq(best_lambda, length = 100)
)
ridge
ridge <- cv.glmnet(x = as.matrix(test[,-12]), y = test[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = best_lambda,
nfolds = 10)
ridge <- cv.glmnet(x = as.matrix(test[,-12]), y = test[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = best_lambda,
nfolds = 10)
ridge
train_ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = train[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = grid, nfolds = 10)
set.seed(10)
train_ridge <- cv.glmnet(x = as.matrix(train[,-12]), y = train[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = grid, nfolds = 10)
# saving the models to a RData file in the data directory
save(ridge, file = 'ridge_models.RData')
save(train_ridge, file = 'ridge_models.RData')
best_lambda <- train_ridge$lambda.min
# plotting the cv erros of the ridge regression and saving the plot as a png image
png('ridge_cv_errors_plot.png')
png('ridge_cv_errors_plot.png')
plot(train_ridge)
abline(v = best_lambda)
dev.off()
png('ridge_cv_errors_plot.png')
plot(train_ridge)
abline(v = best_lambda)
dev.off()
?predict
ridge_pred <- predict(train_ridge, test[,-12], s = best_lambda)
ridge_pred <- predict(train_ridge, as.matrix(test[,-12]), s = best_lambda)
ridge_mse <- mean((ridge_pred - test[,12])^2)
ridge_mse
scaled_credit <- read.csv('scaled_credit.csv')
scaled_credit <- scaled_credit[-1]
View(scaled_credit)
best_ridge <- cv.glmnet(x = as.matrix(scaled_credit[,-12]), y = scaled_credit[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = best_lambda,
nfolds = 10)
best_ridge <- cv.glmnet(x = as.matrix(scaled_credit[,-12]), y = scaled_credit[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = best_lambda)
best_lambda <- train_ridge$lambda.min
best_ridge <- cv.glmnet(x = as.matrix(scaled_credit[,-12]), y = scaled_credit[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = best_lambda)
best_ridge_1 <- cv.glmnet(x = as.matrix(scaled_credit[,-12]), y = scaled_credit[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = best_lambda)
best_ridge_1 <- glmnet(x = as.matrix(scaled_credit[,-12]), y = scaled_credit[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = best_lambda)
best_ridge <- glmnet(x = as.matrix(scaled_credit[,-12]), y = scaled_credit[,12],
intercept = FALSE, standardize = FALSE, alpha = 0,
lambda = best_lambda)
best_ridge
coef(ridge_fit, s = lambda_min_ridge)
coef(best_ridge, s = lambda_min_ridge)
coef(best_ridge, s = best_lambda)
coef(best_ridge)
coef(best_ridge)
, s = best_lambda
coef(best_ridge, s = best_lambda)
class(coef(best_ridge)
)
?coef
best_ridge_coef <- coef(best_ridge)
names(best_ridge_coef)
names(best_ridge_coef) <- 'timo'
str(best_ridge_coef)
best_ridge_coef@Dimnames[1]
best_ridge_coef@Dimnames[[1]
]
best_ridge_coef@Dimnames[[1]]]
best_ridge_coef@Dimnames[[1]]
best_ridge_coef@x
coef_names <- best_ridge_coef@Dimnames[[1]][-1]
coef_names
best_ridge_coef@x
coef_values <- best_ridge_coef@x
coef_names <- best_ridge_coef@Dimnames[[1]][2:]
coef_names
coef_names <- best_ridge_coef@Dimnames[[1]]
coef_names
coef_names[2:]
coef_names[2:end]
coef_values <- best_ridge_coef@x
coef_values <- c(NA,coef_values)
coef_values
best_ridge_coef <- data.frame('Coefficients' = coef_names, 'Values' = coef_values)
best_ridge_coef
sink('ridge-output.txt')
print(best_lambda)
print(ridge_mse)
print(best_ridge_coef)
sink()
sink('ridge-output.txt')
'best'
print(best_lambda)
print(ridge_mse)
print(best_ridge_coef)
sink()
sink('ridge-output.txt')
cat('Best lambda for ridge regression')
print(best_lambda)
cat('Test mean squared error using the best lambda')
print(ridge_mse)
cat('Official coefficients for the optimal model after having fitted the credit data to the best lambda')
print(best_ridge_coef)
sink()
sink('ridge-output.txt')
cat('Best lambda for ridge regression')
print(best_lambda)
cat('Test mean squared error using the best lambda')
print(ridge_mse)
cat('Official coefficients for the optimal model after having fitted the credit data to the best lambda')
print(best_ridge_coef)
sink()
sink('ridge-output.txt')
cat('Best lambda for ridge regression')
print(best_lambda)
cat('Test mean squared error using the best lambda')
print(ridge_mse)
cat('Official coefficients for the optimal model after having fitted the credit data to the best lambda')
print(best_ridge_coef)
sink()
sink('ridge-output.txt')
cat('Best lambda for ridge regression\n')
print(best_lambda)
cat('Test mean squared error using the best lambda\n')
print(ridge_mse)
cat('Official coefficients for the optimal model after having fitted the credit data to the best lambda\n')
print(best_ridge_coef)
sink()
sink('ridge-output.txt')
cat('Best lambda for ridge regression\n')
print(best_lambda)
cat('\nTest mean squared error using the best lambda\n')
print(ridge_mse)
cat('\nOfficial coefficients for the optimal model after having fitted the credit data to the best lambda\n')
print(best_ridge_coef)
sink()
library(glmnet)
pcr()
library(pls)
pcr
?pcr
train_pcr <- pcr(Balance ~ ., data = train, validation = 'CV')
set.seed(1454)
train_pcr <- pcr(Balance ~ ., data = train, validation = 'CV')
train_pcr$validation$PRESS
min(train_pcr$validation$PRESS)
min(train_pcr$validation$PRESS)[2]
min(train_pcr$validation$PRESS)[,2]
min(train_pcr$validation$PRESS)[1]
which.min(train_pcr$validation$PRESS)
comp_values <- train_pcr$validation$PRESS
which.min(comp_values)
comp_values[which.min(comp_values)]
comp_values <- min(train_pcr$validation$PRESS)
class(comp_values)
mode(comp_values)
comp_values[2]
comp_values[1]
comp_values <- train_pcr$validation$PRESS
comp_values[1]
?which.min
index <- which.min(comp_values)
min_pc <- comp_values[index]
min_pc
names(min_pc) <- names(comp_values)[index]
min_pc
names(comp_values)[index]
names(comp_values)[1]
names(comp_values)
comp_values
min_pc <- min(comp_values)
?validationplot
validationplot(train_pcr, val.type = 'MSEP')
index <- which.min(comp_values)
min_pc <- comp_values[index]
validationplot(train_pcr, val.type = 'MSEP')
point(index, min_pc)
library(graphics)
point(index, min_pc)
points(index, min_pc)
validationplot(train_pcr, val.type = 'MSEP')
points(index, min_pc)
points(index, min_pc, pch = 18)
test[-12]
pcr_pred <- predict(pcr_ridge, test[,-12], ncomp = index)
pcr_pred <- predict(train_pcr, test[,-12], ncomp = index)
pcr_pred
pcr_mse <- mean((pcr_pred - test[,12])^2)
pcr_mse
best_pcr <- pcr(Balance ~ ., data = scaled_credit, ncomp = index)
best_pcr
coef(best_pcr)
best_pcr_coef <- coef(best_pcr)
coef_names <- best_pcr_coef@Dimnames[[1]]
coef_values <- best_pcr_coef@x
coef_values <- c(0,coef_values)
best_pcr_coef <- data.frame('Coefficients' = coef_names, 'Values' = coef_values)
best_pcr_coef <- coef(best_pcr)
best_pcr_coef
str(best_pcr_coef
)
best_pcr_coef[1]
getwd()
scaled_credit <- read.csv('scaled_credit.csv')
head(scaled_credit)
scaled_credit <- scaled_credit[-1]
ols <- lm(Balance ~ ., data = scaled_credit)
ols
summary_ols <- summary(ols)
test <- read.csv(file = 'data/test_credit.csv')
test <- read.csv(file = 'test_credit.csv')
test <- test[-1]
ols_pred <- pred(ols, test[,-12])
ols_pred <- predict(ols, test[,-12])
ols_pred
ols_mse <- mean((ols_pred - test[,12])^2)
ols_mse
summary(ols)
ols
ols$coefficients
names(ols$coefficients)
values(ols$coefficients)
unname(ols$coefficients)
quants <- c('Income', 'Limit', 'Rating', 'Cards', 'Age', 'Education', 'Balance')
quants[1]
tolower(quants[1])
credit
with(credit, table(Gender))
?with
table(Gend
)
credit <- read.csv('http://www-bcf.usc.edu/~gareth/ISL/Credit.csv')
credit <- credit[-1]
View(credit)
table(credit$Gender)
table(credit$Student)
table(credit$Ethnicity)
prop.table(gender_freq)
gender_freq <- table(credit$Gender)
student_freq <- table(credit$Student)
married_freq <- table(credit$Married)
ethnicity_freq <- table(credit$Ethnicity)
gender_rel_freq <- prop.table(gender_freq)
gender_rel_freq <-
prop.table(gender_freq)
prop.table(ethnicity_freq)
?prop.table
barplot(gender_rel_freq, ylab = "Proportion", main = "Relative frequency for Gender")
prop.table(gender_freq)
cor(credit)
cor(credit[,quants])
credit_quants <- credit[,-(7:10)]
x <- credit_quants[1:4]
y <- credit_quants[5:7]
cor(x,y)
plot(credit[,qants])
plot(credit[,quants])
pairs(credit_quants, main = "Scatterplot matrix among quantitative variables")
plot(credit[,quants])
pairs(credit_quants, main = "Scatterplot matrix among quantitative variables")
plot(credit[,quants])
pairs(credit[,quants], main = "Scatterplot matrix among Quantitative Variables")
pairs(credit[,quants], main = "Scatterplot matrix among Quantitative Variables")
pairs(credit[,quants], main = "Scatterplot matrix among Quantitative Variables")
plot(credit[,quants], main = "Scatterplot matrix among Quantitative Variables")
plot(credit[,quants], main = "Scatterplot matrix among Quantitative Variables")
plot(x,y)
x = 1
y = 1
plot(x,y)
